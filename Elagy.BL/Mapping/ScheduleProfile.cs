using AutoMapper;
using Elagy.Core.DTOs.Schedule;
using Elagy.Core.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Elagy.BL.Mapping
{
    public class ScheduleProfile:Profile
    {
        public ScheduleProfile()
        {
            CreateMap<Core.Entities.DayOfWeek, DayOfWeekDto>()
               .ForMember(dest => dest.Code, opt => opt.MapFrom(src => src.ShortCode));

            // --- 2. CreateScheduleSlotDto to Schedule Entity (for one-off slots) ---
            CreateMap<CreateScheduleSlotDto, Schedule>()
                .ForMember(dest => dest.Id, opt => opt.Ignore())
                .ForMember(dest => dest.BookedSlots, opt => opt.MapFrom(src => 0)) 
                .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => true)) 
                .ForMember(dest => dest.IsRecurring, opt => opt.MapFrom(src => false)) 
                                                                                       
                .ForMember(dest => dest.DayOfWeekId, opt => opt.Ignore())
                // Ignore navigation properties, as FKs are handled or set in service
                .ForMember(dest => dest.Doctor, opt => opt.Ignore())
                .ForMember(dest => dest.HospitalSpecialty, opt => opt.Ignore())
                .ForMember(dest => dest.DayOfWeek, opt => opt.Ignore());

            // --- 3. CreateScheduleTemplateDto to Schedule Entity (for recurring/template schedules) ---
            CreateMap<CreateScheduleTemplateDto, Schedule>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // ID is auto-generated by DB
                .ForMember(dest => dest.BookedSlots, opt => opt.MapFrom(src => 0)) // New schedule starts with 0 booked slots
                                                                                   // IsActive is present in DTO, maps by convention, or set default if not present
                                                                                   // .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => true)) // Set default if DTO.IsActive is missing or if always true
                .ForMember(dest => dest.IsRecurring, opt => opt.MapFrom(src => true)) // This is a recurring template
                .ForMember(dest => dest.Date, opt => opt.Ignore()) // Template does not have a specific Date
                                                                   // Ignore navigation properties
                .ForMember(dest => dest.Doctor, opt => opt.Ignore())
                .ForMember(dest => dest.HospitalSpecialty, opt => opt.Ignore())
                .ForMember(dest => dest.DayOfWeek, opt => opt.Ignore());

            // --- 4. UpdateScheduleDto to Schedule Entity (for updates) ---
            CreateMap<UpdateScheduleDto, Schedule>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // ID is used for lookup, not mapped onto the entity
                .ForMember(dest => dest.BookedSlots, opt => opt.Ignore()) // BookedSlots should not be directly updated via DTO
                                                                          // REMOVED explicit ignores for DoctorId and HospitalSpecialtyId (now mapped by convention if present in DTO)
                                                                          // NEW: Explicitly ignore DayOfWeekId and IsRecurring as they are no longer in UpdateScheduleDto
                .ForMember(dest => dest.DayOfWeekId, opt => opt.Ignore())
                .ForMember(dest => dest.IsRecurring, opt => opt.Ignore())
                // Ignore navigation properties
                .ForMember(dest => dest.Doctor, opt => opt.Ignore())
                .ForMember(dest => dest.HospitalSpecialty, opt => opt.Ignore())
                .ForMember(dest => dest.DayOfWeek, opt => opt.Ignore());

            // --- 5. Schedule Entity to ScheduleResponseDto (for display/response) ---
            CreateMap<Schedule, ScheduleResponseDto>()
                // Map Doctor's full name
                .ForMember(dest => dest.DoctorName, opt => opt.MapFrom(src => src.Doctor.FirstName + " " + src.Doctor.LastName))
                // Map Specialty Name
                .ForMember(dest => dest.Specialty, opt => opt.MapFrom(src => src.HospitalSpecialty.Specialty.Name))
                // Map Hospital Name
                .ForMember(dest => dest.Hospital, opt => opt.MapFrom(src => src.HospitalSpecialty.HospitalAsset.Name))
                .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => src.IsActive))

                // Map nested DayOfWeekDto (requires DayOfWeek mapping to be configured)
                .ForMember(dest => dest.DayOfWeek, opt => opt.MapFrom(src => src.DayOfWeek)); // Will use the DayOfWeek -> DayOfWeekDto mapping
        }
    }
}
